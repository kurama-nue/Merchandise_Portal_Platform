name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Run linting
        run: npm run lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: merch_portal_test
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: --health-cmd "mongosh --eval \"db.adminCommand('ping')\"" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Generate Prisma client
        run: cd apps/api && npm run prisma:generate

      - name: Run API tests
        run: cd apps/api && npm test
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/merch_portal_test?schema=public
          MONGODB_URI: mongodb://localhost:27017/merch_portal_test
          NODE_ENV: test

      - name: Run Web tests
        run: cd apps/web && npm test

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build API
        run: cd apps/api && npm run build

      - name: Build Web
        run: cd apps/web && npm run build

      - name: Build Docker images
        run: |
          docker build -t merch-portal-api -f apps/api/Dockerfile .
          docker build -t merch-portal-web -f apps/web/Dockerfile .