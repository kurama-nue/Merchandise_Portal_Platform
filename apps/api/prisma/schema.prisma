generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  role              UserRole  @default(CUSTOMER)
  phone             String?
  departmentId      String?
  department        Department? @relation(fields: [departmentId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  orders            Order[]
  reviews           Review[]
  individualOrders  IndividualOrder[]
  groupOrders       GroupOrder[]    @relation("GroupOrderCreator")
  groupOrderMembers GroupOrderMember[]
  payments          Payment[]
  
  @@index([departmentId])
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
  CUSTOMER
}

model Department {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  users       User[]
  products    Product[] @relation("DepartmentProducts")
}

model Product {
  id                String    @id @default(uuid())
  name              String
  description       String?
  price             Decimal   @db.Decimal(10, 2)
  discountPrice     Decimal?  @db.Decimal(10, 2)
  stock             Int       @default(0)
  images            String[]  // Array of image URLs
  departmentId      String
  department        Department @relation("DepartmentProducts", fields: [departmentId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  orderItems        OrderItem[]
  reviews           Review[]
  distributionItems DistributionItem[]
  faqs              FAQ[]
  
  @@index([departmentId])
}

model Order {
  id                String    @id @default(uuid())
  orderNumber       String    @unique
  userId            String
  user              User      @relation(fields: [userId], references: [id])
  status            OrderStatus
  totalAmount       Decimal   @db.Decimal(10, 2)
  shippingAddress   String?
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  orderItems        OrderItem[]
  payments          Payment[]
  individualOrder   IndividualOrder?
  groupOrder        GroupOrder?
  
  @@index([userId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id          String    @id @default(uuid())
  orderId     String
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  unitPrice   Decimal   @db.Decimal(10, 2)
  totalPrice  Decimal   @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([orderId])
  @@index([productId])
}

model IndividualOrder {
  id          String    @id @default(uuid())
  orderId     String    @unique
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([userId])
}

model GroupOrder {
  id              String    @id @default(uuid())
  orderId         String    @unique
  order           Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  creatorId       String
  creator         User      @relation("GroupOrderCreator", fields: [creatorId], references: [id])
  name            String
  description     String?
  deadline        DateTime
  status          GroupOrderStatus @default(OPEN)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  members         GroupOrderMember[]
  
  @@index([creatorId])
}

enum GroupOrderStatus {
  OPEN
  CLOSED
  CANCELLED
}

model GroupOrderMember {
  id            String    @id @default(uuid())
  groupOrderId  String
  groupOrder    GroupOrder @relation(fields: [groupOrderId], references: [id], onDelete: Cascade)
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  joinedAt      DateTime  @default(now())
  
  @@index([groupOrderId])
  @@index([userId])
}

model Payment {
  id              String    @id @default(uuid())
  orderId         String
  order           Order     @relation(fields: [orderId], references: [id])
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  amount          Decimal   @db.Decimal(10, 2)
  paymentMethod   PaymentMethod
  razorpayId      String?   // For Razorpay payments
  status          PaymentStatus
  transactionId   String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([orderId])
  @@index([userId])
}

enum PaymentMethod {
  RAZORPAY
  CREDIT_CARD
  DEBIT_CARD
  UPI
  BANK_TRANSFER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Review {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  rating      Int       // 1-5 stars
  comment     String?
  status      ReviewStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([productId])
  @@index([userId])
}

enum ReviewStatus {
  OPEN
  CLOSED
}

model DistributionSchedule {
  id              String    @id @default(uuid())
  name            String
  description     String?
  scheduledDate   DateTime
  status          DistributionStatus @default(PENDING)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  items           DistributionItem[]
}

enum DistributionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model DistributionItem {
  id                    String    @id @default(uuid())
  distributionScheduleId String
  distributionSchedule DistributionSchedule @relation(fields: [distributionScheduleId], references: [id], onDelete: Cascade)
  productId             String
  product               Product   @relation(fields: [productId], references: [id])
  quantity              Int
  notes                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  @@index([distributionScheduleId])
  @@index([productId])
}

model FAQ {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  question    String
  answer      String
  isPublished Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([productId])
}